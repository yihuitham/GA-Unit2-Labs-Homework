{"version":3,"sources":["context/TVMazeContext.jsx","components/Result.jsx","components/Results.jsx","components/SearchBar.jsx","components/Home.jsx","reportWebVitals.js","index.js"],"names":["QueryContext","createContext","HasSearchedContext","Results","useQueryContext","useContext","useHasSearchedContext","useResultsContext","TVMazeContextProvider","children","useState","query","setQuery","hasSearched","setHasSearched","fetchResults","setFetchResults","Provider","value","Result","props","className","src","img","alt","title","console","log","checkResults","filter","element","show","image","length","generateResults","map","index","medium","name","onClick","SearchBar","url","getResults","a","fetch","response","json","data","ok","onSubmit","e","preventDefault","autoComplete","type","placeholder","onChange","target","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b5eba89.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\n\nconst QueryContext = createContext();\nconst HasSearchedContext = createContext();\nconst Results = createContext();\n\nfunction useQueryContext() {\n  return useContext(QueryContext);\n}\n\nfunction useHasSearchedContext() {\n  return useContext(HasSearchedContext);\n}\n\nfunction useResultsContext() {\n  return useContext(Results);\n}\n\nfunction TVMazeContextProvider({ children }) {\n  const [query, setQuery] = useState(\"\");\n  const [hasSearched, setHasSearched] = useState(false);\n  const [fetchResults, setFetchResults] = useState([]);\n  return (\n    <QueryContext.Provider value={[query, setQuery]}>\n      <HasSearchedContext.Provider value={[hasSearched, setHasSearched]}>\n        <Results.Provider value={[fetchResults, setFetchResults]}>\n          {children}\n        </Results.Provider>\n      </HasSearchedContext.Provider>\n    </QueryContext.Provider>\n  );\n}\n\nexport {\n  TVMazeContextProvider,\n  useQueryContext,\n  useHasSearchedContext,\n  useResultsContext,\n};\n","import React from \"react\";\n\nfunction Result(props) {\n  return (\n    <>\n      <div className=\"result\">\n        <img src={props.img} alt={props.title} />\n        <h4>{props.title}</h4>\n      </div>\n    </>\n  );\n}\n\nexport default Result;\n","import React, { useState } from \"react\";\nimport showsData from \"../showsData\";\nimport Result from \"./Result\";\nimport {\n  useHasSearchedContext,\n  useQueryContext,\n  useResultsContext,\n} from \"../context/TVMazeContext\";\n\nfunction Results() {\n  const [query, setQuery] = useQueryContext();\n  const [hasSearched, setHasSearched] = useHasSearchedContext();\n  const url = `https://api.tvmaze.com/search/shows?q=${query}`;\n  const [fetchResults, setFetchResults] = useResultsContext();\n  // const filteredResults = showsData.filter((element) => {\n  //   return element.show.name.toLowerCase().includes(query.toLowerCase());\n  // });\n\n  // const getResults = async () => {\n  //   const response = await fetch(url);\n  //   const data = await response.json();\n  //   if (response.ok) {\n  //     console.log(\"data\", data);\n  //     setFetchResults(data);\n  //   } else {\n  //     console.log(\"error >>>\", data);\n  //   }\n  // };\n  // // getResults();\n  // console.log(\"line 28\", fetchResults);\n\n  console.log(query);\n  const checkResults = fetchResults.filter(\n    (element) => element.show.image !== null\n  );\n  console.log(checkResults.length);\n  const generateResults = checkResults.map((element, index) => {\n    return (\n      <Result\n        key={index}\n        img={element.show.image.medium}\n        title={element.show.name}\n      />\n    );\n  });\n\n  function handleClick() {\n    setHasSearched(false);\n    setQuery(\"\");\n\n    console.log(hasSearched);\n  }\n  return (\n    <>\n      <button onClick={handleClick}>Search again</button>\n      <div className=\"results\">{generateResults}</div>\n    </>\n  );\n}\n\nexport default Results;\n","import React from \"react\";\nimport {\n  useHasSearchedContext,\n  useQueryContext,\n  useResultsContext,\n} from \"../context/TVMazeContext\";\n\nfunction SearchBar() {\n  const [query, setQuery] = useQueryContext();\n  const [hasSearched, setHasSearched] = useHasSearchedContext();\n  const [fetchResults, setFetchResults] = useResultsContext();\n  const url = `https://api.tvmaze.com/search/shows?q=${query}`;\n  // const filteredResults = showsData.filter((element) => {\n  //   return element.show.name.toLowerCase().includes(query.toLowerCase());\n  // });\n\n  const getResults = async () => {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (response.ok) {\n      console.log(\"data\", data);\n      setFetchResults(data);\n    } else {\n      console.log(\"error >>>\", data);\n    }\n  };\n\n  function handleQueryChange(e) {\n    setQuery(e.target.value);\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    setHasSearched(true);\n    // console.log(hasSearched);\n    getResults();\n  }\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <input\n        name=\"search\"\n        type=\"text\"\n        placeholder=\"Enter a show name..\"\n        onChange={handleQueryChange}\n      />\n      <input value=\"Search\" type=\"submit\" />\n    </form>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport { useHasSearchedContext } from \"../context/TVMazeContext\";\nimport Results from \"./Results\";\nimport SearchBar from \"./SearchBar\";\n\nfunction Home() {\n  const [hasSearched, setHasSearched] = useHasSearchedContext();\n  return (\n    <div className=\"home\">\n      <h1>React TV Maze</h1>\n      {!hasSearched ? <SearchBar /> : <Results />}\n    </div>\n  );\n}\n\nexport default Home;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./components/Home\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { TVMazeContextProvider } from \"./context/TVMazeContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TVMazeContextProvider>\n      <Home />\n    </TVMazeContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}